snippet "con(s)?" "console.log" br
console.log($1${VISUAL});
endsnippet

snippet cns "console.log" Ab
console.log($1${VISUAL});
endsnippet

snippet ssp "spacer" Ab
console.group('`!v expand("%:t")`:`!v line(".")` ┃ ${1/'/\\\'/g}${VISUAL/'/\\\'/g}');
console.log($1${VISUAL}); /* DEBUG */
console.groupEnd();
endsnippet

snippet sst "console table" Ab
console.group('`!v @%`:`!v line(".")` ┃ ${1/'/\\\'/g}${VISUAL/'/\\\'/g}');
console.table($1${VISUAL}); /* DEBUG */
console.groupEnd();
endsnippet

snippet	vfu "var function" Ab
var $1 = function($2) {
	$3${VISUAL}
};
endsnippet

snippet	cfu "const function" Ab
const $1 = ($2) => {
	$3${VISUAL}
};
endsnippet

snippet for "for each index" b
for (let i = 0; i < $1.length; i++) {
	$2${VISUAL}
}
endsnippet

snippet fo "for of"
for (let ${1:prop} of ${2:obj}) {
	$0${VISUAL}
}
endsnippet

snippet objl "object lenght" b
Object.keys($1${VISUAL}).length
endsnippet

snippet todo "todo" b
// @TODO [`git config user.name`] `date +%d-%m-%Y`: $0${VISUAL}
endsnippet

snippet if "if" Ab
if (${1}) {
}
endsnippet

snippet vif "visual if" Abs
if (${1}) {
	$2${VISUAL}
}
endsnippet

snippet }e "else" A
} else {
	$1${VISUAL}
}
endsnippet

snippet => "arrow function"
=> {
	$1${VISUAL}
}
endsnippet

snippet switch "switch" b
switch ($1) {
case '$2':
	$3${VISUAL}
	break;
default:
	$0
}
endsnippet

snippet var "var" b
var $1 = ${VISUAL}$2;
endsnippet

snippet let "let" b
let $1 = ${VISUAL}$2;
endsnippet

snippet const "const" b
const $1 = ${VISUAL}$2;
endsnippet

snippet stt "setTimeout" Ab
setTimeout(() => {
	${VISUAL}$0
}, ${1:0});
endsnippet

snippet gcc "comment" Ab
// $0${VISUAL}
endsnippet

snippet jss "JSON.stringify()" Ai
JSON.stringify($0${VISUAL})
endsnippet

snippet jsp "JSON.parse()" Ai
JSON.parse($0${VISUAL})
endsnippet

snippet dbg "Debugger" Ai
debugger;
endsnippet

snippet ng-comp "Angular 2 component" b
import { Component, OnInit } from '@angular/core';


@Component({
	selector: '`!p snip.rv = vim.eval("expand('%:h')").split('/')[-1]`',
	styleUrls: ['`!p snip.rv = vim.eval("expand('%:h')").split('/')[-1].replace('-component', '')`.component.scss'],
	templateUrl: '`!p snip.rv = vim.eval("expand('%:h')").split('/')[-1].replace('-component', '')`.component.html'
})
export class `!p snip.rv = vim.eval("expand('%:h')").split('/')[-1].title().replace('-', '').replace('Component', '')`Component implements OnInit {

	constructor() {
		$1
	}

	public ngOnInit() {
	}

}

endsnippet

snippet ng-serv "Angular 2 service" b
import { Injectable } from '@angular/core';


@Injectable()
export class `!p snip.rv = vim.eval("expand('%:h')").split('/')[-1].title().replace('-', '').replace('Service', '')`Service {

	constructor() {
		$1
	}

}

endsnippet

snippet ng-spec-comp "Angular 2 component spec" b
import { NO_ERRORS_SCHEMA } from '@angular/core';
import { async, TestBed, ComponentFixture } from '@angular/core/testing';

import { `!p snip.rv = vim.eval("expand('%:h')").split('/')[-1].title().replace('-', '').replace('Component', '')`Component } from './`!p snip.rv = vim.eval("expand('%:h')").split('/')[-1].replace('-component', '')`.component';


describe(\`Components: `!p snip.rv = vim.eval("expand('%:h')").split('/')[-1].title().replace('-', '').replace('Component', '')`\`, () => {
	let fixture: ComponentFixture<`!p snip.rv = vim.eval("expand('%:h')").split('/')[-1].title().replace('-', '').replace('Component', '')`Component>;
	let `!p snip.rv = (lambda s: s[:1].lower() + s[1:] if s else '')(vim.eval("expand('%:h')").split('/')[-1].title().replace('-', '').replace('Component', ''))`Component: `!p snip.rv = vim.eval("expand('%:h')").split('/')[-1].title().replace('-', '').replace('Component', '')`Component;

	beforeEach(async(() => {
		TestBed.configureTestingModule({
			declarations: [ `!p snip.rv = vim.eval("expand('%:h')").split('/')[-1].title().replace('-', '').replace('Component', '')`Component ],
			schemas: [ NO_ERRORS_SCHEMA ]
		})
			.compileComponents()
			.then(() => {
				fixture = TestBed.createComponent(`!p snip.rv = vim.eval("expand('%:h')").split('/')[-1].title().replace('-', '').replace('Component', '')`Component);
				`!p snip.rv = (lambda s: s[:1].lower() + s[1:] if s else '')(vim.eval("expand('%:h')").split('/')[-1].title().replace('-', '').replace('Component', ''))`Component = fixture.componentInstance;
			});
	}));

	it(\`should be initialized\`, () => {
		expect(`!p snip.rv = vim.eval("expand('%:h')").split('/')[-1].title().replace('-', '').replace('Component', '')`Component).toBeDefined();
	});

	describe(\`$1\`, () => {

		it(\`should $2\`, () => {
		});

	});

});

endsnippet

snippet ng-spec-serv "Angular 2 service spec" b
import { NO_ERRORS_SCHEMA } from '@angular/core';
import { async, TestBed, ComponentFixture } from '@angular/core/testing';

import { `!p snip.rv = vim.eval("expand('%:h')").split('/')[-1].title().replace('-', '').replace('Service', '')`Service } from './`!p snip.rv = vim.eval("expand('%:h')").split('/')[-1].replace('-service', '')`.service';


describe(\`Service: `!p snip.rv = vim.eval("expand('%:h')").split('/')[-1].title().replace('-', '').replace('Service', '')`\`, () => {

	beforeEach(async(() => {
		TestBed.configureTestingModule({
			providers: [
				`!p snip.rv = vim.eval("expand('%:h')").split('/')[-1].title().replace('-', '').replace('Service', '')`Service
			],
			schemas: [ NO_ERRORS_SCHEMA ]
		});
	}));

	it(\`should be initialized\`, () => {
		expect(`!p snip.rv = vim.eval("expand('%:h')").split('/')[-1].title().replace('-', '').replace('Service', '')`Service).toBeDefined();
	});

	describe(\`$1\`, () => {

		it(\`should $2\`, inject([`!p snip.rv = vim.eval("expand('%:h')").split('/')[-1].title().replace('-', '').replace('Service', '')`Service], (`!p snip.rv = (lambda s: s[:1].lower() + s[1:] if s else '')(vim.eval("expand('%:h')").split('/')[-1].title().replace('-', '').replace('Service', ''))`Service) => {
		}));

	});

});

endsnippet

snippet ng-mod "Angular 2 module" b
import { NgModule } from '@angular/core';
import { routes } from './`!p snip.rv = vim.eval("expand('%:h')").split('/')[-1]`.routes';
import { CommonModule } from '@angular/common';

import { `!p snip.rv = vim.eval("expand('%:h')").split('/')[-1].title().replace('-', '')`Component } from './`!p snip.rv = vim.eval("expand('%:h')").split('/')[-1].replace('-component', '')`.component';


@NgModule({
	imports: [
		routes,
		CommonModule
	],
	declarations: [
		`!p snip.rv = vim.eval("expand('%:h')").split('/')[-1].title().replace('-', '')`Component
	]
})

export class `!p snip.rv = vim.eval("expand('%:h')").split('/')[-1].title().replace('-', '')`Module {}

endsnippet

snippet ng-route "Agnular 2 route" b
import { ModuleWithProviders } from '@angular/core';
import { Routes, RouterModule } from '@angular/router';

import { `!p snip.rv = vim.eval("expand('%:h')").split('/')[-1].title().replace('-', '')`Component } from './`!p snip.rv = vim.eval("expand('%:h')").split('/')[-1].replace('-component', '')`.component';

const `!p snip.rv = vim.eval("expand('%:h')").split('/')[-1].title().replace('-', '')`Routes: Routes = [
	{ path: '', component: `!p snip.rv = vim.eval("expand('%:h')").split('/')[-1].title().replace('-', '')`Component, pathMatch: 'full' }
];

export const routes: ModuleWithProviders = RouterModule.forChild(`!p snip.rv = vim.eval("expand('%:h')").split('/')[-1].title().replace('-', '')`Routes);

endsnippet

snippet pri "class private variable" bw
private `!p snip.rv = (lambda s: s[:1].lower() + s[1:].split(';')[0].split(' ')[0] if s else '')(t[1])`: $1
endsnippet

snippet pub "class public variable" bw
public `!p snip.rv = (lambda s: s[:1].lower() + s[1:].split(';')[0].split(' ')[0] if s else '')(t[1])`: $1
endsnippet

snippet it "unit test it" bw
it(\`$1\`, () => {
});
endsnippet

snippet des "unit test describe" bw
describe(\`$1\`, () => {
});
endsnippet

